package librarymanagementsystem;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import static librarymanagementsystem.LibraryManagementSystem.memberList;
import static librarymanagementsystem.LibraryManagementSystem.booksList;

public class FileManager {

    public void MemberFileWrite() {

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("members.txt"));
            for (Member member : memberList) {
                writer.write(member.ID + ";" + member.name + ";" + member.surname + ";" + member.emailAddress + ";" + member.totalFines + System.lineSeparator());
            }
            writer.close();
        } catch (IOException e) {
        }
    }

    public List<Member> MemberFileRead() {

        try {
            List<Member> fileMembers = new ArrayList<>();
            BufferedReader reader = new BufferedReader(new FileReader("members.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String[] lineArray = line.split(";");
                int id = Integer.parseInt(lineArray[0]);
                int totalFines = Integer.parseInt(lineArray[4]);
                fileMembers.add(new Member(id, lineArray[1], lineArray[2], lineArray[3], totalFines));
            }
            reader.close();
            return fileMembers;
        } catch (IOException e) {
            return null;
        }
    }

    public void MemberBorrowBooksWrite() {

        try {

            for (Member member : memberList) {
                if (!member.borrowedBooks.isEmpty()) {
                    BufferedWriter writer = new BufferedWriter(new FileWriter("/Users/simonesmyth/NetBeansProjects/LibraryManagementSystem/borrowedbooks/" + member.ID + ".txt", true));

                    String isbnString = "";
                    for (Book book : member.borrowedBooks) {
                        isbnString += book.isbn + ",";
                    }
                    writer.write(isbnString);
                    writer.close();
                }
            }

        } catch (IOException e) {
        }

    }

    public void MemberBorrowBooksRead() {

        try {
            File folder = new File("/Users/simonesmyth/NetBeansProjects/LibraryManagementSystem/borrowedbooks");

            for (File file : folder.listFiles()) {
                if (file.isDirectory()) {
                    continue;
                }
                
                //skip Mac autogenerated file
                if (file.getName().equals(".DS_Store")) {
                    continue;
                }
                
                //skip Windows autogenerated file
                if (file.getName().equals("desktop.ini")) {
                    continue;
                }
                                
                String fileName = file.getName();
                int position = fileName.indexOf(".");
                String memberString = fileName.substring(0, position);
                int memberId = Integer.parseInt(memberString);

                Member targetMember = new Member();
                for (Member member : memberList) {
                    if (member.ID == memberId) {
                        targetMember = member;
                        break;
                    }
                }

                BufferedReader reader = new BufferedReader(new FileReader("/Users/simonesmyth/NetBeansProjects/LibraryManagementSystem/borrowedbooks/" + fileName));
                String line = reader.readLine();

                String[] lineArray = line.split(",");

                for (String isbn : lineArray) {
                    Book targetBook = new Book();
                    for (Book book : booksList) {
                        if (book.isbn.equals(isbn)) {
                            targetBook = book;
                            break;
                        }
                    }
                    targetMember.borrowedBooks.add(targetBook);
                }

            }

        } catch (IOException | NumberFormatException e) {
        }

    }

    public void BookFileWrite() {

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("books.txt"));
            for (Book book : booksList) {

                writer.write(book.title + ";" + book.author + ";" + book.isbn + ";" + book.isAvailable + ";" + book.checkedOutDate + System.lineSeparator());
            }
            writer.close();
        } catch (IOException e) {
        }

    }

    public List<Book> BookFileRead() {

        try {
            List<Book> fileBooks = new ArrayList<>();
            BufferedReader reader = new BufferedReader(new FileReader("books.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String[] lineArray = line.split(";");
                boolean isAvailable = Boolean.parseBoolean(lineArray[3]);

                if (lineArray[4].equals("null")) {
                    LocalDateTime checkedOutDate = null;
                    fileBooks.add(new Book(lineArray[0], lineArray[1], lineArray[2], isAvailable, checkedOutDate));

                } else {
                    LocalDateTime checkedOutDate = LocalDateTime.parse(lineArray[4]);
                    fileBooks.add(new Book(lineArray[0], lineArray[1], lineArray[2], isAvailable, checkedOutDate));
                }

            }
            reader.close();
            return fileBooks;
        } catch (IOException e) {
            return null;
        }
    }

    public void TransactLogFileWrite(String transactionType, String details) {
        String timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        String logEntry = (timestamp + "||" + transactionType + "||" + details + System.lineSeparator());

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("transaction_log.txt", true));

            writer.write(logEntry);
            writer.write(System.lineSeparator()); // Add an empty line between logs

            writer.close();
        } catch (IOException e) {
        }

    }
}
